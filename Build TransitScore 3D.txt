Build "TransitScore 3D" - a Sacramento development site analyzer web application with the following complete implementation:

## PROJECT SETUP & ARCHITECTURE

Create a Next.js 14 (App Router) application with:
- TypeScript strict mode
- Tailwind CSS for styling
- Supabase for backend/database
- Deployed to Vercel
- GitHub repo initialized

## CORE FEATURES TO IMPLEMENT

### 1. ADDRESS INPUT & GEOCODING
- Clean, modern search bar for Sacramento addresses
- Use Nominatim/OpenStreetMap geocoding API (free, no key needed)
- Validate that address is in Sacramento area
- Display coordinates and property info

### 2. INTERACTIVE MAP VISUALIZATION
- Use Mapbox GL JS or Leaflet with OpenStreetMap tiles
- Center on entered address with marker
- Overlay walkability rings: 5min (400m), 10min (800m), 15min (1200m) walk radii
- Color-coded rings with opacity

### 3. TRANSIT & AMENITIES LAYER
- Query Overpass API (OpenStreetMap) for nearby:
  - Bus stops (within 800m)
  - Light rail stations (within 1200m)
  - Parks & recreation (within 800m)
  - Grocery stores (within 800m)
  - Schools (within 1200m)
  - Restaurants/cafes (within 400m)
- Display as categorized markers with icons (use lucide-react icons)
- Clickable markers showing name/type
- Legend showing amenity categories

### 4. 3D BUILDING MASSING PREVIEW
- Use deck.gl or Three.js for 3D visualization
- Show buildable envelope based on:
  - Typical Sacramento zoning setbacks (15ft front, 5ft side, 10ft rear)
  - Height options: 2-story (25ft), 3-story (35ft), 4-story (45ft)
- Slider to adjust building height
- Show max FAR visualization
- Toggle between 2D map and 3D view

### 5. AI-POWERED DENSITY RECOMMENDATIONS
- Analyze the site context and provide density recommendations
- Consider factors:
  - Number of amenities within walk radii
  - Transit accessibility score (0-100)
  - Lot size and constraints
  - Neighborhood character (surrounding building heights from OSM data)
- Display recommendation card with:
  - Suggested units/density
  - Reasoning (2-3 key factors)
  - Walkability score (0-100)
  - Transit score (0-100)
- Use Claude API (via Anthropic) to generate intelligent recommendations

### 6. SCORING DASHBOARD
Display clean metrics cards:
- **Walkability Score** (based on amenity count/proximity)
- **Transit Access Score** (based on transit stop proximity/frequency)
- **Density Potential** (suggested units)
- **Sustainability Score** (walkability + transit combined)

## TECHNICAL REQUIREMENTS

### Supabase Schema
Create these tables:
```sql
-- Store searched sites for analytics
CREATE TABLE analyzed_sites (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  address TEXT NOT NULL,
  lat FLOAT NOT NULL,
  lng FLOAT NOT NULL,
  walkability_score INT,
  transit_score INT,
  amenity_count INT,
  created_at TIMESTAMP DEFAULT NOW()
);

-- Cache amenity data to reduce API calls
CREATE TABLE amenity_cache (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  lat FLOAT NOT NULL,
  lng FLOAT NOT NULL,
  amenity_type TEXT NOT NULL,
  amenities JSONB,
  cached_at TIMESTAMP DEFAULT NOW()
);

-- Add indexes
CREATE INDEX idx_analyzed_sites_coords ON analyzed_sites(lat, lng);
CREATE INDEX idx_amenity_cache_coords ON amenity_cache(lat, lng);
```

### API Routes (Next.js API)
- `/api/geocode` - Convert address to coordinates
- `/api/amenities` - Fetch nearby amenities from Overpass API
- `/api/analyze` - AI-powered density recommendation using Claude
- `/api/transit` - Fetch transit data

### Environment Variables Needed
```
NEXT_PUBLIC_SUPABASE_URL=
NEXT_PUBLIC_SUPABASE_ANON_KEY=
ANTHROPIC_API_KEY=
NEXT_PUBLIC_MAPBOX_TOKEN= (optional, can use free OSM tiles)
```

## UI/UX REQUIREMENTS

- **Modern, clean design** with Sacramento-themed colors (gold/blue accent)
- **Responsive layout**: Split screen (map left, data right) on desktop
- **Loading states** for all async operations
- **Error handling** with helpful messages
- **Smooth animations** when switching views
- **Export button** to save analysis as PDF or share link

## IMPLEMENTATION STEPS

1. Initialize Next.js project with TypeScript and Tailwind
2. Set up Supabase project and create schema
3. Build address search component with geocoding
4. Implement interactive map with walkability rings
5. Add amenity data fetching and marker display
6. Create 3D building massing viewer with controls
7. Build AI analysis endpoint using Claude API
8. Design scoring dashboard with metrics
9. Add Supabase data logging for analytics
10. Polish UI/UX and add animations
11. Deploy to Vercel with environment variables
12. Test with Sacramento addresses

## DEMO-READY FEATURES

For your presentation, make sure:
- Pre-load a good Sacramento address (e.g., "1400 K St, Sacramento, CA" - downtown)
- Smooth transitions and fast loading
- Clear visual hierarchy
- "Wow factor" 3D visualization
- AI recommendations that sound intelligent and context-aware

Build this as a complete, production-ready application with proper error handling, loading states, and polished UI. Use your MCP connections to set up Supabase, deploy to Vercel, and push to GitHub automatically.